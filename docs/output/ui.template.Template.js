Ext.data.JsonP.ui_template_Template({"tagname":"class","name":"ui.template.Template","extends":null,"mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{"abstract":true},"private":null,"id":"class-ui.template.Template","members":{"cfg":[],"property":[],"method":[{"name":"apply","tagname":"method","owner":"ui.template.Template","meta":{"abstract":true},"id":"method-apply"}],"event":[],"css_var":[],"css_mixin":[]},"linenr":7,"files":[{"filename":"Template.js","href":"Template.html#ui-template-Template"}],"html_meta":{"abstract":null},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":["ui.template.LoDash"],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Subclasses</h4><div class='dependency'><a href='#!/api/ui.template.LoDash' rel='ui.template.LoDash' class='docClass'>ui.template.LoDash</a></div><h4>Files</h4><div class='dependency'><a href='source/Template.html#ui-template-Template' target='_blank'>Template.js</a></div></pre><div class='doc-contents'><p>Base class and interface for template implementations. For the default concrete Template implementation used\nby the framework, see <a href=\"#!/api/ui.template.LoDash\" rel=\"ui.template.LoDash\" class=\"docClass\">ui.template.LoDash</a>.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-apply' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='ui.template.Template'>ui.template.Template</span><br/><a href='source/Template.html#ui-template-Template-method-apply' target='_blank' class='view-source'>view source</a></div><a href='#!/api/ui.template.Template-method-apply' class='name expandable'>apply</a>( <span class='pre'>[data]</span> ) : String<strong class='abstract signature' >abstract</strong></div><div class='description'><div class='short'>Applies the given data object to the Template, and returns the result. ...</div><div class='long'><p>Applies the given <code>data</code> object to the Template, and returns the result.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>data</span> : Object (optional)<div class='sub-desc'><p>The data object to apply to the template (i.e. execute the compiled template function\n  with). If the template does not use any data, this may be ommitted.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The result of applying the <code>data</code> object to the template.</p>\n</div></li></ul></div></div></div></div></div></div></div>"});