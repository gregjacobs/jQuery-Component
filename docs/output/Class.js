Ext.data.JsonP.Class({"tagname":"class","name":"Class","extends":null,"mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{},"private":null,"id":"class-Class","members":{"cfg":[],"property":[],"method":[{"name":"constructor","tagname":"method","owner":"Class","meta":{},"id":"method-constructor"},{"name":"abstractMethod","tagname":"method","owner":"Class","meta":{},"id":"method-abstractMethod"}],"event":[],"css_var":[],"css_mixin":[]},"linenr":10,"files":[{"filename":"Class.js","href":"Class.html#Class"},{"filename":"Class.js","href":"Class.html#Class"}],"html_meta":{},"statics":{"cfg":[],"property":[],"method":[{"name":"apply","tagname":"method","owner":"Class","meta":{"static":true},"id":"static-method-apply"},{"name":"applyIf","tagname":"method","owner":"Class","meta":{"static":true},"id":"static-method-applyIf"},{"name":"create","tagname":"method","owner":"Class","meta":{"static":true},"id":"static-method-create"},{"name":"extend","tagname":"method","owner":"Class","meta":{"static":true},"id":"static-method-extend"},{"name":"hasMixin","tagname":"method","owner":"Class","meta":{"static":true},"id":"static-method-hasMixin"},{"name":"isInstanceOf","tagname":"method","owner":"Class","meta":{"static":true},"id":"static-method-isInstanceOf"},{"name":"isObject","tagname":"method","owner":"Class","meta":{"private":true,"static":true},"id":"static-method-isObject"},{"name":"isSubclassOf","tagname":"method","owner":"Class","meta":{"static":true},"id":"static-method-isSubclassOf"},{"name":"override","tagname":"method","owner":"Class","meta":{"static":true},"id":"static-method-override"}],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Class.html#Class' target='_blank'>Class.js</a></div><div class='dependency'><a href='source/Class.html#Class' target='_blank'>Class.js</a></div></pre><div class='doc-contents'><p>Utility for powerful JavaScript class creation. This provides a number of features for OOP in JavaScript, including:</p>\n\n<ul>\n<li>Single inheritance with subclasses (like Java, C#, etc.)</li>\n<li>Mixin classes</li>\n<li>Static methods, which can optionally be automatically inherited by subclasses</li>\n<li>A static method which is placed on classes that are created, which can be used to determine if the <em>class</em> is a subclass of\nanother (unlike the <code>instanceof</code> operator, which checks if an <em>instance</em> is a subclass of a given class).</li>\n<li>An <code>instanceOf()</code> method, which should be used instead of the JavaScript <code>instanceof</code> operator, to determine if the instance\nis an instance of a provided class, superclass, or mixin (the JavaScript <code>instanceof</code> operator only covers the first two).</li>\n<li>The ability to add static methods while creating/extending a class, right inside the definition using special properties <code>statics</code>\nand <code>inheritedStatics</code>. The former only applies properties to the class being created, while the latter applies properties to the\nclass being created, and all subclasses which extend it. (Note that the keyword for this had to be <code>statics</code>, and not <code>static</code>, as\n<code>static</code> is a reserved word in Javascript).</li>\n<li>A special static method, onClassExtended(), which can be placed in either the <code>statics</code> or <code>inheritedStatics</code> section, that is\nexecuted after the class has been extended.</li>\n</ul>\n\n\n<p>Note that this is not the base class of all <code>Class</code> classes. It is a utility to create classes, and extend other classes. The\nfact that it is not required to be at the top of any inheritance hierarchy means that you may use it to extend classes from\nother frameworks and libraries, with all of the features that this implementation provides.</p>\n\n<p>Simple example of creating classes:</p>\n\n<pre><code>var Animal = Class( {\n    constructor : function( name ) {\n        this.name = name;\n    },\n\n    sayHi : function() {\n        alert( \"Hi, my name is: \" + this.name );\n    },\n\n    eat : function() {\n        alert( this.name + \" is eating\" );\n    }\n} );\n\n\nvar Dog = Animal.extend( {\n    // Override sayHi method from superclass\n    sayHi : function() {\n        alert( \"Woof! My name is: \" + this.name );\n    }\n} );\n\nvar Cat = Animal.extend( {\n    // Override sayHi method from superclass\n    sayHi : function() {\n        alert( \"Meow! My name is: \" + this.name );\n    }\n} );\n\n\nvar dog1 = new Dog( \"Lassie\" );\nvar dog2 = new Dog( \"Bolt\" );\nvar cat = new Cat( \"Leonardo Di Fishy\" );\n\ndog1.sayHi();  // \"Woof! My name is: Lassie\"\ndog2.sayHi();  // \"Woof! My name is: Bolt\"\ncat.sayHi();   // \"Meow! My name is: Leonardo Di Fishy\"\n\ndog1.eat();  // \"Lassie is eating\"\ndog2.eat();  // \"Bolt is eating\"\ncat.eat();   // \"Leonardo Di Fishy is eating\"\n</code></pre>\n</div><div class='members'><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance Methods</h3><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Class'>Class</span><br/><a href='source/Class.html#Class-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Class-method-constructor' class='name expandable'>Class</a>( <span class='pre'>classDefinition</span> ) : <a href=\"#!/api/Class\" rel=\"Class\" class=\"docClass\">Class</a></div><div class='description'><div class='short'>Creates a new class that extends from Object (the base class of all classes in JavaScript). ...</div><div class='long'><p>Creates a new class that extends from <code>Object</code> (the base class of all classes in JavaScript). Running the\n<code>Class</code> constructor function is equivalent of calling <a href=\"#!/api/Class-static-method-extend\" rel=\"Class-static-method-extend\" class=\"docClass\">Class.extend()</a>. To extend classes\nthat are already subclassed, use either <a href=\"#!/api/Class-static-method-extend\" rel=\"Class-static-method-extend\" class=\"docClass\">extend</a>, or the static <code>extend</code> method that is added\nto all subclasses.</p>\n\n<p>Examples for the <code>Class</code> constructor:</p>\n\n<pre><code>// Create a new class, with Object as the superclass\n// (i.e. no other particular superclass; see <a href=\"#!/api/Class-static-method-extend\" rel=\"Class-static-method-extend\" class=\"docClass\">extend</a> for that)\nvar MyClass = new Class( {\n    constructor : function() {\n        console.log( \"Constructing, 123\" );\n    },\n\n    method1 : function() {},\n    method2 : function() {}\n} );\n\n\n// Can be used without the `new` keyword as well, if desired.\n// This may actually make more sense, as you're creating the definition for a class, not an instance.\nvar MyClass = Class( {\n    constructor : function() {\n        console.log( \"Constructing, 123\" );\n    },\n\n    method1 : function() {},\n    method2 : function() {}\n} );\n\n\n// The above two examples are exactly equivalent to:\nvar MyClass = <a href=\"#!/api/Class-static-method-extend\" rel=\"Class-static-method-extend\" class=\"docClass\">Class.extend</a>( Object, {\n    constructor : function() {\n        console.log( \"Constructing, 123\" );\n    },\n\n    method1 : function() {},\n    method2 : function() {}\n} );\n</code></pre>\n\n<p>See <a href=\"#!/api/Class-static-method-extend\" rel=\"Class-static-method-extend\" class=\"docClass\">extend</a> for details about extending classes.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>classDefinition</span> : Object<div class='sub-desc'><p>The class definition. See the <code>overrides</code> parameter of <a href=\"#!/api/Class-static-method-extend\" rel=\"Class-static-method-extend\" class=\"docClass\">extend</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Class\" rel=\"Class\" class=\"docClass\">Class</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-abstractMethod' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Class'>Class</span><br/><a href='source/Class.html#Class-method-abstractMethod' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Class-method-abstractMethod' class='name expandable'>abstractMethod</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>A function which can be referenced from class definition code to specify an abstract method. ...</div><div class='long'><p>A function which can be referenced from class definition code to specify an abstract method.\nThis method (function) simply throws an error if called, meaning that the method must be overridden in a\nsubclass. Ex:</p>\n\n<pre><code>var AbstractClass = Class( {\n    myMethod : <a href=\"#!/api/Class-method-abstractMethod\" rel=\"Class-method-abstractMethod\" class=\"docClass\">Class.abstractMethod</a>\n} );\n</code></pre>\n</div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static Methods</h3><div id='static-method-apply' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Class'>Class</span><br/><a href='source/Class.html#Class-static-method-apply' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Class-static-method-apply' class='name expandable'>apply</a>( <span class='pre'>obj, config, defaults</span> ) : Object<strong class='static signature' >static</strong></div><div class='description'><div class='short'>Utility to copy all the properties of config to obj. ...</div><div class='long'><p>Utility to copy all the properties of <code>config</code> to <code>obj</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object<div class='sub-desc'><p>The receiver of the properties</p>\n</div></li><li><span class='pre'>config</span> : Object<div class='sub-desc'><p>The source of the properties</p>\n</div></li><li><span class='pre'>defaults</span> : Object<div class='sub-desc'><p>A different object that will also be applied for default values</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>returns obj</p>\n</div></li></ul></div></div></div><div id='static-method-applyIf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Class'>Class</span><br/><a href='source/Class.html#Class-static-method-applyIf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Class-static-method-applyIf' class='name expandable'>applyIf</a>( <span class='pre'>obj, config</span> ) : Object<strong class='static signature' >static</strong></div><div class='description'><div class='short'>Utility to copy all the properties of config to obj, if they don't already exist on obj. ...</div><div class='long'><p>Utility to copy all the properties of <code>config</code> to <code>obj</code>, if they don't already exist on <code>obj</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object<div class='sub-desc'><p>The receiver of the properties</p>\n</div></li><li><span class='pre'>config</span> : Object<div class='sub-desc'><p>The source of the properties</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>returns obj</p>\n</div></li></ul></div></div></div><div id='static-method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Class'>Class</span><br/><a href='source/Class.html#Class-static-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Class-static-method-create' class='name expandable'>create</a>( <span class='pre'>classDefinition</span> )<strong class='static signature' >static</strong></div><div class='description'><div class='short'>Alias of using the Class constructor function itself. ...</div><div class='long'><p>Alias of using the Class constructor function itself. Ex:</p>\n\n<pre><code>var Animal = <a href=\"#!/api/Class-static-method-create\" rel=\"Class-static-method-create\" class=\"docClass\">Class.create</a>( {\n    // class definition here\n} );\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>classDefinition</span> : Object<div class='sub-desc'><p>The class definition. See the <code>overrides</code> parameter of <a href=\"#!/api/Class-static-method-extend\" rel=\"Class-static-method-extend\" class=\"docClass\">extend</a>.</p>\n</div></li></ul></div></div></div><div id='static-method-extend' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Class'>Class</span><br/><a href='source/Class.html#Class-static-method-extend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Class-static-method-extend' class='name expandable'>extend</a>( <span class='pre'>superclass, overrides</span> ) : Function<strong class='static signature' >static</strong></div><div class='description'><div class='short'>Extends one class to create a subclass of it based on a passed object literal (overrides), and optionally any mixin\nc...</div><div class='long'><p>Extends one class to create a subclass of it based on a passed object literal (<code>overrides</code>), and optionally any mixin\nclasses that are desired.</p>\n\n<p>This method adds a few methods to the class that it creates:</p>\n\n<ul>\n<li>override : Method that can be used to override members of the class with a passed object literal.\nSame as <a href=\"#!/api/Class-static-method-override\" rel=\"Class-static-method-override\" class=\"docClass\">override</a>, without the first argument.</li>\n<li>extend : Method that can be used to directly extend the class. Same as this method, except without\nthe first argument.</li>\n<li>hasMixin : Method that can be used to find out if the class (or any of its superclasses) implement a given mixin.\nAccepts one argument: the class (constructor function) of the mixin. Note that it is preferable to check if a given\nobject is an instance of another class or has a mixin by using the <a href=\"#!/api/Class-static-method-isInstanceOf\" rel=\"Class-static-method-isInstanceOf\" class=\"docClass\">isInstanceOf</a> method. This hasMixin()\nmethod will just determine if the class has a given mixin, and not if it is an instance of a superclass, or even an\ninstance of itself.</li>\n</ul>\n\n\n<p>For example, to create a subclass of MySuperclass:</p>\n\n<pre><code>MyComponent = <a href=\"#!/api/Class-static-method-extend\" rel=\"Class-static-method-extend\" class=\"docClass\">Class.extend</a>( MySuperclass, {\n\n    constructor : function( config ) {\n        // apply the properties of the config object to this instance\n        <a href=\"#!/api/Class-static-method-apply\" rel=\"Class-static-method-apply\" class=\"docClass\">Class.apply</a>( this, config );\n\n        // Call superclass constructor\n        MyComponent.superclass.constructor.call( this );\n\n        // Your postprocessing here\n    },\n\n    // extension of another method (assuming MySuperclass had this method)\n    someMethod : function() {\n        // some preprocessing, if needed\n\n        MyComponent.superclass.someMethod.apply( this, arguments );  // send all arguments to superclass method\n\n        // some post processing, if needed\n    },\n\n    // a new method for this subclass (not an extended method)\n    yourMethod: function() {\n        // implementation\n    }\n} );\n</code></pre>\n\n<p>This is an example of creating a class with a mixin called MyMixin:</p>\n\n<pre><code>MyComponent = <a href=\"#!/api/Class-static-method-extend\" rel=\"Class-static-method-extend\" class=\"docClass\">Class.extend</a>( Class.util.Observable, {\n    mixins : [ MyMixin ],\n\n    constructor : function( config ) {\n        // apply the properties of the config to the object\n        <a href=\"#!/api/Class-static-method-apply\" rel=\"Class-static-method-apply\" class=\"docClass\">Class.apply</a>( this, config );\n\n        // Call superclass constructor\n        MyComponent.superclass.constructor.call( this );\n\n        // Call the mixin's constructor\n        MyMixin.constructor.call( this );\n\n        // Your postprocessing here\n    },\n\n\n    // properties/methods of the mixin will be added automatically, if they don't exist already on the class\n\n\n    // method that overrides or extends a mixin's method\n    mixinMethod : function() {\n        // call the mixin's method, if desired\n        MyMixin.prototype.mixinMethod.call( this );\n\n        // post processing\n    }\n\n} );\n</code></pre>\n\n<p>Note that calling superclass methods can be done with either the [Class].superclass or [Class].<strong>super</strong> property.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>superclass</span> : Function<div class='sub-desc'><p>The constructor function of the class being extended. If making a brand new class with no superclass, this may\n  either be omitted, or provided as <code>Object</code>.</p>\n</div></li><li><span class='pre'>overrides</span> : Object<div class='sub-desc'><p>An object literal with members that make up the subclass's properties/method. These are copied into the subclass's\n  prototype, and are therefore shared between all instances of the new class. This may contain a special member named\n  <code>constructor</code>, which is used to define the constructor function of the new subclass. If this property is <em>not</em> specified,\n  a constructor function is generated and returned which just calls the superclass's constructor, passing on its parameters.\n  <strong>It is essential that you call the superclass constructor in any provided constructor.</strong> See example code.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>The subclass constructor from the <code>overrides</code> parameter, or a generated one if not provided.</p>\n</div></li></ul></div></div></div><div id='static-method-hasMixin' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Class'>Class</span><br/><a href='source/Class.html#Class-static-method-hasMixin' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Class-static-method-hasMixin' class='name expandable'>hasMixin</a>( <span class='pre'>classToTest, mixinClass</span> )<strong class='static signature' >static</strong></div><div class='description'><div class='short'>Determines if a class has a given mixin. ...</div><div class='long'><p>Determines if a class has a given mixin. Note: Most likely, you will want to use <a href=\"#!/api/Class-static-method-isInstanceOf\" rel=\"Class-static-method-isInstanceOf\" class=\"docClass\">isInstanceOf</a> instead,\nas that will tell you if the given class either extends another class, or either has, or extends a class with\na given mixin.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>classToTest</span> : Function<div class='sub-desc'>\n</div></li><li><span class='pre'>mixinClass</span> : Function<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-isInstanceOf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Class'>Class</span><br/><a href='source/Class.html#Class-static-method-isInstanceOf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Class-static-method-isInstanceOf' class='name expandable'>isInstanceOf</a>( <span class='pre'>obj, jsClass</span> ) : Boolean<strong class='static signature' >static</strong></div><div class='description'><div class='short'>Determines if a given object (obj) is an instance of a given class (jsClass). ...</div><div class='long'><p>Determines if a given object (<code>obj</code>) is an instance of a given class (<code>jsClass</code>). This method will\nreturn true if the <code>obj</code> is an instance of the <code>jsClass</code> itself, if it is a subclass of the <code>jsClass</code>,\nor if the <code>jsClass</code> is a mixin on the <code>obj</code>. For more information about classes and mixins, see the\n<a href=\"#!/api/Class-static-method-extend\" rel=\"Class-static-method-extend\" class=\"docClass\">extend</a> method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Mixed<div class='sub-desc'><p>The object (instance) to test.</p>\n</div></li><li><span class='pre'>jsClass</span> : Function<div class='sub-desc'><p>The class (constructor function) of which to see if the <code>obj</code> is an instance of, or has a mixin of.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the obj is an instance of the jsClass (it is a direct instance of it,\n  it inherits from it, or the jsClass is a mixin of it)</p>\n</div></li></ul></div></div></div><div id='static-method-isObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Class'>Class</span><br/><a href='source/Class.html#Class-static-method-isObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Class-static-method-isObject' class='name expandable'>isObject</a>( <span class='pre'>value</span> ) : Boolean<strong class='private signature' >private</strong><strong class='static signature' >static</strong></div><div class='description'><div class='short'>Determines if a value is an object. ...</div><div class='long'><p>Determines if a value is an object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Mixed<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value is an object, false otherwise.</p>\n</div></li></ul></div></div></div><div id='static-method-isSubclassOf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Class'>Class</span><br/><a href='source/Class.html#Class-static-method-isSubclassOf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Class-static-method-isSubclassOf' class='name expandable'>isSubclassOf</a>( <span class='pre'>subclass, superclass</span> ) : Boolean<strong class='static signature' >static</strong></div><div class='description'><div class='short'>Determines if a class (i.e. ...</div><div class='long'><p>Determines if a class (i.e. constructor function) is, or is a subclass of, the given <code>baseClass</code>.</p>\n\n<p>The order of the arguments follows how <a href=\"#!/api/Class-static-method-isInstanceOf\" rel=\"Class-static-method-isInstanceOf\" class=\"docClass\">isInstanceOf</a> accepts them (as well as the JavaScript\n<code>instanceof</code> operator. Try reading it as if there was a <code>subclassof</code> operator, i.e. <code>subcls subclassof supercls</code>.</p>\n\n<p>Example:</p>\n\n<pre><code>var Superclass = Class( {} );\nvar Subclass = Superclass.extend( {} );\n\n<a href=\"#!/api/Class-static-method-isSubclassOf\" rel=\"Class-static-method-isSubclassOf\" class=\"docClass\">Class.isSubclassOf</a>( Subclass, Superclass );   // true - Subclass is derived from (i.e. extends) Superclass\n<a href=\"#!/api/Class-static-method-isSubclassOf\" rel=\"Class-static-method-isSubclassOf\" class=\"docClass\">Class.isSubclassOf</a>( Superclass, Superclass ); // true - Superclass is the same class as itself\n<a href=\"#!/api/Class-static-method-isSubclassOf\" rel=\"Class-static-method-isSubclassOf\" class=\"docClass\">Class.isSubclassOf</a>( Subclass, Subclass );     // true - Subclass is the same class as itself\n<a href=\"#!/api/Class-static-method-isSubclassOf\" rel=\"Class-static-method-isSubclassOf\" class=\"docClass\">Class.isSubclassOf</a>( Superclass, Subclass );   // false - Superclass is *not* derived from Subclass\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>subclass</span> : Function<div class='sub-desc'><p>The class to test.</p>\n</div></li><li><span class='pre'>superclass</span> : Function<div class='sub-desc'><p>The class to test against.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the <code>subclass</code> is derived from <code>superclass</code> (or is equal to <code>superclass</code>), false otherwise.</p>\n</div></li></ul></div></div></div><div id='static-method-override' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Class'>Class</span><br/><a href='source/Class.html#Class-static-method-override' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Class-static-method-override' class='name expandable'>override</a>( <span class='pre'>origclass, overrides</span> )<strong class='static signature' >static</strong></div><div class='description'><div class='short'>Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name. ...</div><div class='long'><p>Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.\nUsage:</p>\n\n<pre><code><a href=\"#!/api/Class-static-method-override\" rel=\"Class-static-method-override\" class=\"docClass\">Class.override</a>( MyClass, {\n    newMethod1 : function() {\n        // etc.\n    },\n    newMethod2 : function( foo ) {\n        // etc.\n    }\n} );\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>origclass</span> : Object<div class='sub-desc'><p>The class to override</p>\n</div></li><li><span class='pre'>overrides</span> : Object<div class='sub-desc'><p>The list of functions to add to origClass.  This should be specified as an object literal\ncontaining one or more methods.</p>\n</div></li></ul></div></div></div></div></div></div></div>"});