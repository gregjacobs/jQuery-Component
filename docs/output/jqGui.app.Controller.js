Ext.data.JsonP.jqGui_app_Controller({"tagname":"class","name":"jqGui.app.Controller","extends":"Observable","mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{},"private":null,"id":"class-jqGui.app.Controller","members":{"cfg":[{"name":"listeners","tagname":"cfg","owner":"Observable","meta":{},"id":"cfg-listeners"},{"name":"refs","tagname":"cfg","owner":"jqGui.app.Controller","meta":{},"id":"cfg-refs"},{"name":"view","tagname":"cfg","owner":"jqGui.app.Controller","meta":{"required":true},"id":"cfg-view"}],"property":[{"name":"eventBusSubscribed","tagname":"property","owner":"jqGui.app.Controller","meta":{"protected":true},"id":"property-eventBusSubscribed"},{"name":"filterOptRe","tagname":"property","owner":"Observable","meta":{"private":true},"id":"property-filterOptRe"},{"name":"listeners","tagname":"property","owner":"jqGui.app.Controller","meta":{"protected":true},"id":"property-listeners"},{"name":"refs","tagname":"property","owner":"jqGui.app.Controller","meta":{"protected":true},"id":"property-refs"}],"method":[{"name":"constructor","tagname":"method","owner":"jqGui.app.Controller","meta":{},"id":"method-constructor"},{"name":"addEvents","tagname":"method","owner":"Observable","meta":{},"id":"method-addEvents"},{"name":"addListener","tagname":"method","owner":"Observable","meta":{"chainable":true},"id":"method-addListener"},{"name":"addRef","tagname":"method","owner":"jqGui.app.Controller","meta":{"protected":true},"id":"method-addRef"},{"name":"destroy","tagname":"method","owner":"jqGui.app.Controller","meta":{},"id":"method-destroy"},{"name":"fireEvent","tagname":"method","owner":"Observable","meta":{},"id":"method-fireEvent"},{"name":"getRef","tagname":"method","owner":"jqGui.app.Controller","meta":{},"id":"method-getRef"},{"name":"hasListener","tagname":"method","owner":"Observable","meta":{},"id":"method-hasListener"},{"name":"init","tagname":"method","owner":"jqGui.app.Controller","meta":{"protected":true,"template":true},"id":"method-init"},{"name":"listen","tagname":"method","owner":"jqGui.app.Controller","meta":{},"id":"method-listen"},{"name":"on","tagname":"method","owner":"Observable","meta":{},"id":"method-on"},{"name":"onComponentEvent","tagname":"method","owner":"jqGui.app.Controller","meta":{"protected":true},"id":"method-onComponentEvent"},{"name":"onDestroy","tagname":"method","owner":"jqGui.app.Controller","meta":{"protected":true},"id":"method-onDestroy"},{"name":"purgeListeners","tagname":"method","owner":"Observable","meta":{},"id":"method-purgeListeners"},{"name":"removeListener","tagname":"method","owner":"Observable","meta":{"chainable":true},"id":"method-removeListener"},{"name":"resumeEvents","tagname":"method","owner":"Observable","meta":{},"id":"method-resumeEvents"},{"name":"suspendEvents","tagname":"method","owner":"Observable","meta":{},"id":"method-suspendEvents"},{"name":"un","tagname":"method","owner":"Observable","meta":{},"id":"method-un"}],"event":[{"name":"all","tagname":"event","owner":"Observable","meta":{},"id":"event-all"},{"name":"destroy","tagname":"event","owner":"jqGui.app.Controller","meta":{},"id":"event-destroy"}],"css_var":[],"css_mixin":[]},"linenr":10,"files":[{"filename":"Controller.js","href":"Controller.html#jqGui-app-Controller"}],"html_meta":{},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":["Observable"],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/Observable' rel='Observable' class='docClass'>Observable</a><div class='subclass '><strong>jqGui.app.Controller</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Controller.html#jqGui-app-Controller' target='_blank'>Controller.js</a></div></pre><div class='doc-contents'><p>Base class Controller which should be extended by implementations to implement controller logic.</p>\n\n<p>The Controller must be provided the <a href=\"#!/api/jqGui.app.Controller-cfg-view\" rel=\"jqGui.app.Controller-cfg-view\" class=\"docClass\">view(s)</a> (<a href=\"#!/api/jqGui.Component\" rel=\"jqGui.Component\" class=\"docClass\">Components</a>) that it is to work with.\nIt uses this to query for components, and listen to events from. This may be one Component (most likely an outer\n<a href=\"#!/api/jqGui.Viewport\" rel=\"jqGui.Viewport\" class=\"docClass\">jqGui.Viewport</a> or <a href=\"#!/api/jqGui.Container\" rel=\"jqGui.Container\" class=\"docClass\">jqGui.Container</a>), or multiple components to reference and listen to events from. The\nComponent(s) provided to the <a href=\"#!/api/jqGui.app.Controller-cfg-view\" rel=\"jqGui.app.Controller-cfg-view\" class=\"docClass\">view</a> config give the scope of the Controllers reach, where both those components\nand their descendant components may be manipulated / listened to.</p>\n\n<h2>References to View Components</h2>\n\n<p>A Controller may set up <a href=\"#!/api/jqGui.app.Controller-cfg-refs\" rel=\"jqGui.app.Controller-cfg-refs\" class=\"docClass\">refs</a> to easily retrieve references to components, based on a\n<a href=\"#!/api/jqGui.ComponentQuery\" rel=\"jqGui.ComponentQuery\" class=\"docClass\">ComponentQuery</a> selector. Alternatively, the <a href=\"#!/api/jqGui.app.Controller-method-addRef\" rel=\"jqGui.app.Controller-method-addRef\" class=\"docClass\">addRef</a> method may also be used to\ndynamically add references.</p>\n\n<p>References to component(s) are retrieved using the <a href=\"#!/api/jqGui.app.Controller-method-getRef\" rel=\"jqGui.app.Controller-method-getRef\" class=\"docClass\">getRef</a> method. The <a href=\"#!/api/jqGui.app.Controller-method-getRef\" rel=\"jqGui.app.Controller-method-getRef\" class=\"docClass\">getRef</a> accepts the reference\nname, and returns the component, or array of components (if the <code>multiple</code> flag was set to true), for that reference.\nFor example, defining a Controller implementation subclass:</p>\n\n<pre><code>define( [\n    'jqGui/Controller'\n], function( Controller ) {\n\n    var UserController = Controller.extend( {\n\n        refs : {\n            'userPanel'      : '#mainUserPanel',\n            'userTextFields' : { selector: 'textfield', multiple: true }\n        },\n\n        init : function() {\n            this._super( arguments );\n\n            // (If we wanted to retrieve the components right here in the init() method...)\n            this.getRef( 'userPanel' );      // --&gt; Retrieves the Panel instance with an id of 'mainUserPanel'\n            this.getRef( 'userTextFields' ); // --&gt; Retrieves the array of <a href=\"#!/api/jqGui.form.field.Text\" rel=\"jqGui.form.field.Text\" class=\"docClass\">jqGui.form.field.Text</a> components\n        }\n\n    } );\n\n\n    return UserController;\n\n} );\n</code></pre>\n\n<p>The selector query for a reference is only executed the first time that it is called for from <a href=\"#!/api/jqGui.app.Controller-method-getRef\" rel=\"jqGui.app.Controller-method-getRef\" class=\"docClass\">getRef</a>. The\ncomponent(s) that matched the selector are then cached for subsequent calls to <a href=\"#!/api/jqGui.app.Controller-method-getRef\" rel=\"jqGui.app.Controller-method-getRef\" class=\"docClass\">getRef</a>. This behavior may\nbe overridden by either passing the <code>forceQuery</code> option to <a href=\"#!/api/jqGui.app.Controller-method-getRef\" rel=\"jqGui.app.Controller-method-getRef\" class=\"docClass\">getRef</a>, or if the reference is defined with\nthe <code>noCache</code> option set to <code>true</code>. A reason this may be useful is if components are dynamically added to the <a href=\"#!/api/jqGui.app.Controller-cfg-view\" rel=\"jqGui.app.Controller-cfg-view\" class=\"docClass\">view</a>\nthat this Controller is working with, in which case you may want to retrieve the latest list of components.</p>\n\n<p>See the <a href=\"#!/api/jqGui.app.Controller-cfg-refs\" rel=\"jqGui.app.Controller-cfg-refs\" class=\"docClass\">refs</a> config for more details on setting up references.</p>\n\n<h2>Listening to Events</h2>\n\n<p>A Controller may set up listeners based on <a href=\"#!/api/jqGui.ComponentQuery\" rel=\"jqGui.ComponentQuery\" class=\"docClass\">ComponentQuery</a> selectors, to be able to respond to\nevents from components living under its configured <a href=\"#!/api/jqGui.app.Controller-cfg-view\" rel=\"jqGui.app.Controller-cfg-view\" class=\"docClass\">view</a>. The <a href=\"#!/api/jqGui.app.Controller-method-listen\" rel=\"jqGui.app.Controller-method-listen\" class=\"docClass\">listen</a> method handles this functionality,\nand listeners are usually set up from the <a href=\"#!/api/jqGui.app.Controller-method-init\" rel=\"jqGui.app.Controller-method-init\" class=\"docClass\">init</a> hook method. For example:</p>\n\n<pre><code>define( [\n    'jqGui/Controller'\n], function( Controller ) {\n\n    var UserController = Controller.extend( {\n\n        init : function() {\n            this._super( arguments );\n\n            this.listen( {\n                '#userPanel' : {\n                    'show' : this.onUserPanelShow,\n                    'hide' : this.onUserPanelHide\n                },\n                '#submitButton' : {\n                    'click' : this.onSubmitClick\n                }\n            } );\n        },\n\n\n        this.onUserPanelShow : function( panel ) {\n            console.log( \"User panel has been shown\" );\n        },\n\n        this.onUserPanelHide : function( panel ) {\n            console.log( \"User panel has been hidden\" );\n        },\n\n        this.onSubmitClick : function( button ) {\n            console.log( \"Submit button has been clicked\" );\n        }\n\n    } );\n\n\n    return UserController;\n\n} );\n</code></pre>\n\n<p>All event handler methods are called in the scope of the Controller. See <a href=\"#!/api/jqGui.app.Controller-method-listen\" rel=\"jqGui.app.Controller-method-listen\" class=\"docClass\">listen</a> for more details.</p>\n</div><div class='members'><div class='members-section'><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Required Config options</h3><div id='cfg-view' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-cfg-view' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jqGui.app.Controller-cfg-view' class='name expandable'>view</a><span> : <a href=\"#!/api/jqGui.Component\" rel=\"jqGui.Component\" class=\"docClass\">jqGui.Component</a></span><strong class='required signature' >required</strong></div><div class='description'><div class='short'>The view Component that the Controller should manage. ...</div><div class='long'><p>The view Component that the Controller should manage. <a href=\"#!/api/jqGui.app.Controller-cfg-refs\" rel=\"jqGui.app.Controller-cfg-refs\" class=\"docClass\">References</a> retrieved for components, and events\nlistened to must either be on the Component provided to this config, or a descendant of the component (which\nin this case is a <a href=\"#!/api/jqGui.Container\" rel=\"jqGui.Container\" class=\"docClass\">Container</a>) provided to this config.</p>\n\n<p>Most often, this config will be the the page's outermost <a href=\"#!/api/jqGui.Viewport\" rel=\"jqGui.Viewport\" class=\"docClass\">Viewport</a> (which itself is a\n<a href=\"#!/api/jqGui.Container\" rel=\"jqGui.Container\" class=\"docClass\">Container</a> subclass). However, this may also be any\n<a href=\"#!/api/jqGui.Component\" rel=\"jqGui.Component\" class=\"docClass\">Component</a>/<a href=\"#!/api/jqGui.Container\" rel=\"jqGui.Container\" class=\"docClass\">Container</a>, which will limit the scope of what component(s) the\nController controls.</p>\n\n<p>As an example setup for a page:</p>\n\n<pre><code>require( [\n    'jquery',\n    'jqGui/Viewport',\n    'my/app/Controller'  // your own <a href=\"#!/api/jqGui.app.Controller\" rel=\"jqGui.app.Controller\" class=\"docClass\">jqGui.app.Controller</a> subclass, which implements your page's logic\n], function( $, Viewport, Controller ) {\n\n    var viewport = new Viewport( {\n        items : [ \n            // all of the page's view components go here,\n            // in their nested hierarchy\n        ]\n    } );\n\n    var controller = new Controller( {\n        view : viewport   // pass the Viewport as the view that the Controller controls\n    } );\n\n\n    // Render the Viewport on doc ready\n    $( document ).ready( function() {\n        viewport.render( 'body' );\n    } );\n\n} );\n</code></pre>\n</div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Optional Config options</h3><div id='cfg-listeners' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Observable' rel='Observable' class='defined-in docClass'>Observable</a><br/><a href='source/Observable.html#Observable-cfg-listeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Observable-cfg-listeners' class='name expandable'>listeners</a><span> : Object</span></div><div class='description'><div class='short'>(optional)\nA config object containing one or more event handlers to be added to this object during initialization. ...</div><div class='long'><p>(optional)\nA config object containing one or more event handlers to be added to this object during initialization.<br/>\nThis should be a valid listeners config object as specified in the <a href=\"#!/api/Observable-method-addListener\" rel=\"Observable-method-addListener\" class=\"docClass\">addListener</a> example for attaching\nmultiple handlers at once.</p>\n</div></div></div><div id='cfg-refs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-cfg-refs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jqGui.app.Controller-cfg-refs' class='name expandable'>refs</a><span> : Object</span></div><div class='description'><div class='short'>An Object (map) for component references that the Controller should set up. ...</div><div class='long'><p>An Object (map) for component references that the Controller should set up. This config should be added to the\n<strong>prototype</strong> of the Controller, in a Controller subclass. See the documentation of this class for an example of\nhow to create a Controller subclass.</p>\n\n<p>References are based on a <a href=\"#!/api/jqGui.ComponentQuery\" rel=\"jqGui.ComponentQuery\" class=\"docClass\">ComponentQuery</a> selector, and make it easy to retrieve matching\ncomponent(s) throughout the Controller's code using <a href=\"#!/api/jqGui.app.Controller-method-getRef\" rel=\"jqGui.app.Controller-method-getRef\" class=\"docClass\">getRef</a>.</p>\n\n<p>This Object should be keyed by the ref names, and whose values are Objects with the following properties:\n- <strong>selector</strong> (String) : The selector string for the ref.\n- <strong>multiple</strong> (Boolean) : (Optional) <code>true</code> if this is a multi-component selector (in which case an array is returned\n  when retrieving the ref), or <code>false</code> if the selector returns a single component. Defaults to <code>false</code>.\n- <strong>noCache</strong> (Boolean) : (Optional) <code>true</code> if this ref should not cache its result, and instead re-query the <a href=\"#!/api/jqGui.app.Controller-cfg-view\" rel=\"jqGui.app.Controller-cfg-view\" class=\"docClass\">view</a>\n  when the ref is requested again. Defaults to <code>false</code>.</p>\n\n<p>The values may also simply be a string, where the string is taken as the selector.</p>\n\n<p>Example:</p>\n\n<pre><code>refs : {\n    'myComponent1' : '#myComponent1',  // shorthand use with just a selector\n    'myComponent2' : { selector: '#myComponent2' },\n    'myTextFields' : { selector: 'textfield', multiple: true },  // matches all TextField components\n    'myButtons'    : { selector: 'button', multiple: true, noCache: true }\n}\n</code></pre>\n\n<p><code>refs</code> extend to subclasses, but any refs defined in a subclass with the same name as one in a superclass\nwill overwrite the superclass's ref.</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-eventBusSubscribed' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-property-eventBusSubscribed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jqGui.app.Controller-property-eventBusSubscribed' class='name expandable'>eventBusSubscribed</a><span> : Boolean</span><strong class='protected signature' >protected</strong></div><div class='description'><div class='short'>Flag which is set to true once this controller has subscribed to the jqGui.app.EventBus, to listen for all\njqGui.Comp...</div><div class='long'><p>Flag which is set to true once this controller has subscribed to the <a href=\"#!/api/jqGui.app.EventBus\" rel=\"jqGui.app.EventBus\" class=\"docClass\">jqGui.app.EventBus</a>, to listen for all\n<a href=\"#!/api/jqGui.Component\" rel=\"jqGui.Component\" class=\"docClass\">jqGui.Component</a> events.</p>\n</div></div></div><div id='property-filterOptRe' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Observable' rel='Observable' class='defined-in docClass'>Observable</a><br/><a href='source/Observable.html#Observable-property-filterOptRe' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Observable-property-filterOptRe' class='name expandable'>filterOptRe</a><span> : RegExp</span><strong class='private signature' >private</strong></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>/^(?:scope|delay|buffer|single)$/</code></p></div></div></div><div id='property-listeners' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-property-listeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jqGui.app.Controller-property-listeners' class='name expandable'>listeners</a><span> : Object</span><strong class='protected signature' >protected</strong></div><div class='description'><div class='short'>An Object (map) which stores the listeners registered from listen. ...</div><div class='long'><p>An Object (map) which stores the listeners registered from <a href=\"#!/api/jqGui.app.Controller-method-listen\" rel=\"jqGui.app.Controller-method-listen\" class=\"docClass\">listen</a>.</p>\n\n<p>This Object is keyed by the event names which are registered, and its values are an array of objects, each of which\nhave properties: <code>selector</code> and <code>handlerFn</code>.</p>\n\n<p>An example of what this map looks like is this:</p>\n\n<pre><code>{\n    'click' : [\n        { selector: '#myCmp1', handlerFn: this.onMyCmp1Click },\n        { selector: 'button',  handlerFn: this.onButtonClick }\n    ],\n    'keyup' : [\n        { selector: '#searchTextField', handlerFn: this.onSearchFieldKeyUp }\n    ]\n}\n</code></pre>\n</div></div></div><div id='property-refs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-property-refs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jqGui.app.Controller-property-refs' class='name expandable'>refs</a><span> : Object</span><strong class='protected signature' >protected</strong></div><div class='description'><div class='short'>An Object (map) which is keyed by the ref names, and whose values are Objects with the following properties:\n\n\nselect...</div><div class='long'><p>An Object (map) which is keyed by the ref names, and whose values are Objects with the following properties:</p>\n\n<ul>\n<li><strong>selector</strong> (String) : The selector string for the ref.</li>\n<li><strong>multiple</strong> (Boolean} : <code>true</code> if this is a multi-component selector (in which case an array is returned\nwhen retrieving the ref), or <code>false</code> if the selector returns a single component.</li>\n<li><strong>noCache</strong> (Boolean) : <code>true</code> if this ref should not cache its result, and instead re-query the <a href=\"#!/api/jqGui.app.Controller-cfg-view\" rel=\"jqGui.app.Controller-cfg-view\" class=\"docClass\">view</a>\nwhen the ref is requested again.</li>\n<li><strong>cachedComponents</strong> (<a href=\"#!/api/jqGui.Component\" rel=\"jqGui.Component\" class=\"docClass\">jqGui.Component</a>[]) : An array of the cached component references. This is populated after the\nfirst use of the ref.</li>\n</ul>\n\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/jqGui.app.Controller-method-constructor' class='name expandable'>jqGui.app.Controller</a>( <span class='pre'>cfg</span> ) : <a href=\"#!/api/jqGui.app.Controller\" rel=\"jqGui.app.Controller\" class=\"docClass\">jqGui.app.Controller</a></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cfg</span> : Object<div class='sub-desc'><p>Any of the configuration options of this class, specified in an Object (map).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/jqGui.app.Controller\" rel=\"jqGui.app.Controller\" class=\"docClass\">jqGui.app.Controller</a></span><div class='sub-desc'>\n</div></li></ul><p>Overrides: <a href='#!/api/Observable-method-constructor' rel='Observable-method-constructor' class='docClass'>Observable.constructor</a></p></div></div></div><div id='method-addEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Observable' rel='Observable' class='defined-in docClass'>Observable</a><br/><a href='source/Observable.html#Observable-method-addEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Observable-method-addEvents' class='name expandable'>addEvents</a>( <span class='pre'>o, Optional</span> )</div><div class='description'><div class='short'>Adds the specified events to the list of events which this Observable may fire. ...</div><div class='long'><p>Adds the specified events to the list of events which this Observable may fire.\nUsage:</p>\n\n<pre><code>this.addEvents( 'storeloaded', 'storecleared' );\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object/String<div class='sub-desc'><p>Either an object with event names as properties with a value of <code>true</code>\nor the first event name string if multiple event names are being passed as separate parameters.</p>\n</div></li><li><span class='pre'>Optional</span> : String<div class='sub-desc'><p>. Event name if multiple event names are being passed as separate parameters.</p>\n</div></li></ul></div></div></div><div id='method-addListener' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Observable' rel='Observable' class='defined-in docClass'>Observable</a><br/><a href='source/Observable.html#Observable-method-addListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Observable-method-addListener' class='name expandable'>addListener</a>( <span class='pre'>eventName, handler, [scope], [options]</span> ) : <a href=\"#!/api/Observable\" rel=\"Observable\" class=\"docClass\">Observable</a><strong class='chainable signature' >chainable</strong></div><div class='description'><div class='short'>Appends an event handler to this object. ...</div><div class='long'><p>Appends an event handler to this object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the event to listen for.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The method the event invokes.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code>this</code> reference) in which the handler function is executed. <strong>If omitted, defaults to the object which fired the event.</strong></p>\n\n<p>Alternatively, a single options object may be provided:</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object containing handler configuration properties. This may contain any of the following properties:</p>\n<ul><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code>this</code> reference) in which the handler function is executed. <strong>If omitted, defaults to the object which fired the event.</strong></p>\n</div></li><li><span class='pre'>delay</span> : Number (optional)<div class='sub-desc'><p>The number of milliseconds to delay the invocation of the handler after the event fires.</p>\n</div></li><li><span class='pre'>single</span> : Boolean (optional)<div class='sub-desc'><p>True to add a handler to handle just the next firing of the event, and then remove itself.</p>\n</div></li><li><span class='pre'>buffer</span> : Number (optional)<div class='sub-desc'><p>Causes the handler to be scheduled to run in a delayed fashion by the specified number of milliseconds.\n  If the event fires again within that time, the original handler is <em>not</em> invoked, but the new handler is scheduled in its place.</p>\n\n<p><strong>Combining Options</strong>\nUsing the options argument, it is possible to combine different types of listeners:</p>\n\n<p>A delayed, one-time listener.</p>\n\n<pre><code>myDataView.on('click', this.onClick, this, {\n    single: true,\n    delay: 100\n});\n</code></pre>\n\n<p><strong>Attaching multiple handlers in 1 call</strong>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.</p>\n\n<pre><code>myGridPanel.on({\n    'click' : {\n        fn: this.onClick,\n        scope: this,\n        delay: 100\n    },\n    'mouseover' : {\n        fn: this.onMouseOver,\n        scope: this\n    },\n    'mouseout' : {\n        fn: this.onMouseOut,\n        scope: this\n    }\n});\n</code></pre>\n\n<p>Or a shorthand syntax:</p>\n\n<pre><code>myGridPanel.on( {\n    'click' : this.onClick,\n    'mouseover' : this.onMouseOver,\n    'mouseout' : this.onMouseOut,\n    scope: this\n} );\n</code></pre>\n</div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Observable\" rel=\"Observable\" class=\"docClass\">Observable</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-addRef' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-method-addRef' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jqGui.app.Controller-method-addRef' class='name expandable'>addRef</a>( <span class='pre'>ref, selector, [options]</span> )<strong class='protected signature' >protected</strong></div><div class='description'><div class='short'>Adds a reference to one or more components that can be retrieved easily by name. ...</div><div class='long'><p>Adds a reference to one or more components that can be retrieved easily by name. A reference is related\nto a <a href=\"#!/api/jqGui.ComponentQuery\" rel=\"jqGui.ComponentQuery\" class=\"docClass\">ComponentQuery</a> selector, which is executed when the reference is retrieved\n(via <a href=\"#!/api/jqGui.app.Controller-method-getRef\" rel=\"jqGui.app.Controller-method-getRef\" class=\"docClass\">getRef</a>).</p>\n\n<p>After the first retrieval of a reference with <a href=\"#!/api/jqGui.app.Controller-method-getRef\" rel=\"jqGui.app.Controller-method-getRef\" class=\"docClass\">getRef</a>, the result is cached for subsequent <a href=\"#!/api/jqGui.app.Controller-method-getRef\" rel=\"jqGui.app.Controller-method-getRef\" class=\"docClass\">getRef</a>\ncalls.</p>\n\n<p>This method accepts an alternative arguments list other than the one documented. It accepts an Object as the first\n(and only) argument, for a configuration object of ref(s) to add. This configuration object should matche the form that\nthe <a href=\"#!/api/jqGui.app.Controller-cfg-refs\" rel=\"jqGui.app.Controller-cfg-refs\" class=\"docClass\">refs config</a> accepts. Example:</p>\n\n<pre><code>this.addRef( {\n    'myComponent'  : '#myComponent',\n    'myTextFields' : { selector: 'textfield' },\n    'myButtons'    : { selector: 'button', multiple: true, noCache: true }\n} );\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ref</span> : String/Object<div class='sub-desc'><p>The reference name, or a configuration object for one or more refs. If providing a configuration\n  object, the rest of the parameters of this method are ignored.</p>\n</div></li><li><span class='pre'>selector</span> : String<div class='sub-desc'><p>The selector string to select components by.</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object which may contain the following properties:</p>\n<ul><li><span class='pre'>multiple</span> : Boolean (optional)<div class='sub-desc'><p><code>true</code> to create a reference which returns multiple\n  components. The return from <a href=\"#!/api/jqGui.app.Controller-method-getRef\" rel=\"jqGui.app.Controller-method-getRef\" class=\"docClass\">getRef</a> will be an array of <a href=\"#!/api/jqGui.Component\" rel=\"jqGui.Component\" class=\"docClass\">Components</a>\n  if this option is set to <code>true</code>. By default, a ref only retrieves a single component, and its\n  instance is directly returned by <a href=\"#!/api/jqGui.app.Controller-method-getRef\" rel=\"jqGui.app.Controller-method-getRef\" class=\"docClass\">getRef</a>.</p>\n<p>Defaults to: <code>false</code></p></div></li><li><span class='pre'>noCache</span> : Boolean (optional)<div class='sub-desc'><p><code>false</code> to prevent the caching of the retrieved components after they\n  are retrieved with <a href=\"#!/api/jqGui.app.Controller-method-getRef\" rel=\"jqGui.app.Controller-method-getRef\" class=\"docClass\">getRef</a>. This is useful for <code>multiple</code> refs (selectors which are to retrieve multiple\n  components), where the number of components may change due to additions or removals from the page.</p>\n<p>Defaults to: <code>true</code></p></div></li></ul></div></li></ul></div></div></div><div id='method-destroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-method-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jqGui.app.Controller-method-destroy' class='name expandable'>destroy</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Destroys the Controller by removing all references, and removing any listeners\nthat have been set up. ...</div><div class='long'><p>Destroys the Controller by removing all <a href=\"#!/api/jqGui.app.Controller-property-refs\" rel=\"jqGui.app.Controller-property-refs\" class=\"docClass\">references</a>, and removing any <a href=\"#!/api/jqGui.app.Controller-property-listeners\" rel=\"jqGui.app.Controller-property-listeners\" class=\"docClass\">listeners</a>\nthat have been set up.</p>\n\n<p>Subclasses should not override this method, but instead override the <a href=\"#!/api/jqGui.app.Controller-method-onDestroy\" rel=\"jqGui.app.Controller-method-onDestroy\" class=\"docClass\">onDestroy</a> hook method\nto implement any subclass-specific destruction processing. Subclass overrides of <a href=\"#!/api/jqGui.app.Controller-method-onDestroy\" rel=\"jqGui.app.Controller-method-onDestroy\" class=\"docClass\">onDestroy</a>\nshould call the superclass method at the end of their subclass-specific processing.</p>\n</div></div></div><div id='method-fireEvent' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Observable' rel='Observable' class='defined-in docClass'>Observable</a><br/><a href='source/Observable.html#Observable-method-fireEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Observable-method-fireEvent' class='name expandable'>fireEvent</a>( <span class='pre'>eventName, args</span> ) : Boolean</div><div class='description'><div class='short'>Fires the specified event with the passed parameters (minus the event name). ...</div><div class='long'><p>Fires the specified event with the passed parameters (minus the event name).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the event to fire.</p>\n</div></li><li><span class='pre'>args</span> : Object...<div class='sub-desc'><p>Variable number of parameters are passed to handlers.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>returns false if any of the handlers return false otherwise it returns true.</p>\n</div></li></ul></div></div></div><div id='method-getRef' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-method-getRef' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jqGui.app.Controller-method-getRef' class='name expandable'>getRef</a>( <span class='pre'>refName, [options]</span> ) : <a href=\"#!/api/jqGui.Component\" rel=\"jqGui.Component\" class=\"docClass\">jqGui.Component</a>/<a href=\"#!/api/jqGui.Component\" rel=\"jqGui.Component\" class=\"docClass\">jqGui.Component</a>[]</div><div class='description'><div class='short'>Retrieves a Component by ref name (or multiple Components, if the\nmultiple flag was set to true when adding the ref). ...</div><div class='long'><p>Retrieves a <a href=\"#!/api/jqGui.Component\" rel=\"jqGui.Component\" class=\"docClass\">Component</a> by ref name (or multiple <a href=\"#!/api/jqGui.Component\" rel=\"jqGui.Component\" class=\"docClass\">Components</a>, if the\n<code>multiple</code> flag was set to <code>true</code> when <a href=\"#!/api/jqGui.app.Controller-method-addRef\" rel=\"jqGui.app.Controller-method-addRef\" class=\"docClass\">adding the ref</a>).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>refName</span> : String<div class='sub-desc'>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object which may contain the following properties:</p>\n<ul><li><span class='pre'>forceQuery</span> : Boolean (optional)<div class='sub-desc'><p><code>true</code> to force the reference to re-query for the component(s),\n  even if the component references have previously been cached. This may be useful for \"multi-component\"\n  references, if the components on the page have changed, and a new query for them must be made. (Single\n  component references are automatically handled if the component has been\n  <a href=\"#!/api/jqGui.Component-method-destroy\" rel=\"jqGui.Component-method-destroy\" class=\"docClass\">destroyed</a>.)</p>\n<p>Defaults to: <code>false</code></p></div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/jqGui.Component\" rel=\"jqGui.Component\" class=\"docClass\">jqGui.Component</a>/<a href=\"#!/api/jqGui.Component\" rel=\"jqGui.Component\" class=\"docClass\">jqGui.Component</a>[]</span><div class='sub-desc'><p>A single component (in the case of singular references, which are\n  the default), or an array if the <code>multiple</code> flag was provided for the reference in <a href=\"#!/api/jqGui.app.Controller-method-addRef\" rel=\"jqGui.app.Controller-method-addRef\" class=\"docClass\">addRef</a>.</p>\n</div></li></ul></div></div></div><div id='method-hasListener' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Observable' rel='Observable' class='defined-in docClass'>Observable</a><br/><a href='source/Observable.html#Observable-method-hasListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Observable-method-hasListener' class='name expandable'>hasListener</a>( <span class='pre'>eventName</span> ) : Boolean</div><div class='description'><div class='short'>Checks to see if this object has any listeners for a specified event ...</div><div class='long'><p>Checks to see if this object has any listeners for a specified event</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the event to check for</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the event is being listened for, else false</p>\n</div></li></ul></div></div></div><div id='method-init' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-method-init' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jqGui.app.Controller-method-init' class='name expandable'>init</a>( <span class='pre'></span> )<strong class='protected signature' >protected</strong><strong class='template signature' >template</strong></div><div class='description'><div class='short'>Hook method which should be overridden in subclasses to implement the Controller's initialization logic. ...</div><div class='long'><p>Hook method which should be overridden in subclasses to implement the Controller's initialization logic.</p>\n      <div class='signature-box template'>\n      <p>This is a <a href=\"#!/guide/components\">template method</a>.\n         a hook into the functionality of this class.\n         Feel free to override it in child classes.</p>\n      </div>\n</div></div></div><div id='method-listen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-method-listen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jqGui.app.Controller-method-listen' class='name expandable'>listen</a>( <span class='pre'>selectors</span> )</div><div class='description'><div class='short'>Adds event listeners to components selected via jqGui.ComponentQuery selectors. ...</div><div class='long'><p>Adds event listeners to components selected via <a href=\"#!/api/jqGui.ComponentQuery\" rel=\"jqGui.ComponentQuery\" class=\"docClass\">jqGui.ComponentQuery</a> selectors. The <code>selectors</code> argument accepts an\nObject (map) of component selector strings as its keys, and a map of event names -&gt; handler functions as its values.</p>\n\n<p>For example, in this controller, we may want to handle the click event of all <a href=\"#!/api/jqGui.button.Button\" rel=\"jqGui.button.Button\" class=\"docClass\">jqGui.button.Button</a> components which\nexist under the <a href=\"#!/api/jqGui.app.Controller-cfg-view\" rel=\"jqGui.app.Controller-cfg-view\" class=\"docClass\">view</a>, as well as a <a href=\"#!/api/jqGui.Anchor\" rel=\"jqGui.Anchor\" class=\"docClass\">jqGui.Anchor</a> component with the id \"myAnchor\".</p>\n\n<pre><code>define( [\n    'jqGui/app/Controller'\n], function( Controller ) {\n\n    var MyController = Controller.extend( {\n\n        init : function() {\n            this._super( arguments );\n\n            this.listen( {\n                'button' : {   // select all Button components\n                    'click' : this.onButtonClick\n                },\n                '#myAnchor' : {   // select component by id\n                    'click' : this.onAnchorClick\n                }\n            } );\n        },\n\n\n        onButtonClick : function( button ) {\n            console.log( \"clicked the button with text: \", button.text );\n        },\n\n\n        onAnchorClick : function( anchor ) {\n            console.log( \"you clicked the anchor\" );\n        }\n\n    } );\n\n} );\n</code></pre>\n\n<p>Note that handlers are always called in the scope (<code>this</code> reference) of the Controller.</p>\n\n<p>See <a href=\"#!/api/jqGui.ComponentQuery\" rel=\"jqGui.ComponentQuery\" class=\"docClass\">jqGui.ComponentQuery</a> for more information on component selector strings.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>selectors</span> : Object<div class='sub-desc'><p>An Object (map) where the keys are component selector strings, and the values are Objects (maps)\n  which map event names to handler functions. See the description of this method for details.</p>\n</div></li></ul></div></div></div><div id='method-on' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Observable' rel='Observable' class='defined-in docClass'>Observable</a><br/><a href='source/Observable.html#Observable-method-on' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Observable-method-on' class='name expandable'>on</a>( <span class='pre'>eventName, handler, [scope], [options]</span> )</div><div class='description'><div class='short'>Appends an event handler to this object (shorthand for addListener.) ...</div><div class='long'><p>Appends an event handler to this object (shorthand for <a href=\"#!/api/Observable-method-addListener\" rel=\"Observable-method-addListener\" class=\"docClass\">addListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event to listen for</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The method the event invokes</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code>this</code> reference) in which the handler function is executed.\n  <strong>If omitted, defaults to the object which fired the event.</strong></p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object containing handler configuration.</p>\n</div></li></ul></div></div></div><div id='method-onComponentEvent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-method-onComponentEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jqGui.app.Controller-method-onComponentEvent' class='name expandable'>onComponentEvent</a>( <span class='pre'>component, eventName, fireEventArgs</span> )<strong class='protected signature' >protected</strong></div><div class='description'><div class='short'>Handles an event being fired by a component, from the EventBus. ...</div><div class='long'><p>Handles an event being fired by a component, from the <a href=\"#!/api/jqGui.app.EventBus\" rel=\"jqGui.app.EventBus\" class=\"docClass\">EventBus</a>. Calls the handlers\nthat are registered for the particular <code>eventName</code>, and that match the selector which was set up in <a href=\"#!/api/jqGui.app.Controller-method-listen\" rel=\"jqGui.app.Controller-method-listen\" class=\"docClass\">listen</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>component</span> : <a href=\"#!/api/jqGui.Component\" rel=\"jqGui.Component\" class=\"docClass\">jqGui.Component</a><div class='sub-desc'><p>The Component which fired the event.</p>\n</div></li><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the event which was fired.</p>\n</div></li><li><span class='pre'>fireEventArgs</span> : Mixed[]<div class='sub-desc'><p>The arguments provided to the original <a href=\"#!/api/Observable-method-fireEvent\" rel=\"Observable-method-fireEvent\" class=\"docClass\">fireEvent</a> call.\n  This does not include the event name.</p>\n</div></li></ul></div></div></div><div id='method-onDestroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-method-onDestroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jqGui.app.Controller-method-onDestroy' class='name expandable'>onDestroy</a>( <span class='pre'></span> )<strong class='protected signature' >protected</strong></div><div class='description'><div class='short'>Hook method which should be overridden by subclasses to implement their own subclass-specific\ndestruction logic. ...</div><div class='long'><p>Hook method which should be overridden by subclasses to implement their own subclass-specific\ndestruction logic. The superclass method should be called after any subclass-specific processing.</p>\n</div></div></div><div id='method-purgeListeners' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Observable' rel='Observable' class='defined-in docClass'>Observable</a><br/><a href='source/Observable.html#Observable-method-purgeListeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Observable-method-purgeListeners' class='name expandable'>purgeListeners</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Removes all listeners for this object ...</div><div class='long'><p>Removes all listeners for this object</p>\n</div></div></div><div id='method-removeListener' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Observable' rel='Observable' class='defined-in docClass'>Observable</a><br/><a href='source/Observable.html#Observable-method-removeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Observable-method-removeListener' class='name expandable'>removeListener</a>( <span class='pre'>eventName, handler, [scope]</span> ) : <a href=\"#!/api/Observable\" rel=\"Observable\" class=\"docClass\">Observable</a><strong class='chainable signature' >chainable</strong></div><div class='description'><div class='short'>Removes an event handler. ...</div><div class='long'><p>Removes an event handler.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event the handler was associated with.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The handler to remove. <b>This must be a reference to the function passed into the <a href=\"#!/api/Observable-method-addListener\" rel=\"Observable-method-addListener\" class=\"docClass\">addListener</a> call.</b></p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope originally specified for the handler.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Observable\" rel=\"Observable\" class=\"docClass\">Observable</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-resumeEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Observable' rel='Observable' class='defined-in docClass'>Observable</a><br/><a href='source/Observable.html#Observable-method-resumeEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Observable-method-resumeEvents' class='name expandable'>resumeEvents</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Resume firing events. ...</div><div class='long'><p>Resume firing events. (see <a href=\"#!/api/Observable-method-suspendEvents\" rel=\"Observable-method-suspendEvents\" class=\"docClass\">suspendEvents</a>)\nIf events were suspended using the <code>&lt;b&gt;queueSuspended&lt;/b&gt;</code> parameter, then all\nevents fired during event suspension will be sent to any listeners now.</p>\n</div></div></div><div id='method-suspendEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Observable' rel='Observable' class='defined-in docClass'>Observable</a><br/><a href='source/Observable.html#Observable-method-suspendEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Observable-method-suspendEvents' class='name expandable'>suspendEvents</a>( <span class='pre'>queueSuspended</span> )</div><div class='description'><div class='short'>Suspend the firing of all events. ...</div><div class='long'><p>Suspend the firing of all events. (see <a href=\"#!/api/Observable-method-resumeEvents\" rel=\"Observable-method-resumeEvents\" class=\"docClass\">resumeEvents</a>)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>queueSuspended</span> : Boolean<div class='sub-desc'><p>Pass as true to queue up suspended events to be fired\n  after the <a href=\"#!/api/Observable-method-resumeEvents\" rel=\"Observable-method-resumeEvents\" class=\"docClass\">resumeEvents</a> call instead of discarding all suspended events;</p>\n</div></li></ul></div></div></div><div id='method-un' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Observable' rel='Observable' class='defined-in docClass'>Observable</a><br/><a href='source/Observable.html#Observable-method-un' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Observable-method-un' class='name expandable'>un</a>( <span class='pre'>eventName, handler, [scope]</span> )</div><div class='description'><div class='short'>Removes an event handler (shorthand for removeListener.) ...</div><div class='long'><p>Removes an event handler (shorthand for <a href=\"#!/api/Observable-method-removeListener\" rel=\"Observable-method-removeListener\" class=\"docClass\">removeListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event the handler was associated with.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The handler to remove. <strong>This must be a reference to the function passed into the <a href=\"#!/api/Observable-method-addListener\" rel=\"Observable-method-addListener\" class=\"docClass\">addListener</a> call.</strong></p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope originally specified for the handler.</p>\n</div></li></ul></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-event'>Events</h3><div class='subsection'><div id='event-all' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Observable' rel='Observable' class='defined-in docClass'>Observable</a><br/><a href='source/Observable.html#Observable-event-all' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Observable-event-all' class='name expandable'>all</a>( <span class='pre'>eventName, args</span> )</div><div class='description'><div class='short'>Special event which can be used to subscribe to all events from the Observable. ...</div><div class='long'><p>Special event which can be used to subscribe to <em>all</em> events from the Observable. When a given event\nis fired, this event is fired immediately after it, with the name of the original event as the first\nargument, and all other original arguments provided immediately after.</p>\n\n<p>Ex:</p>\n\n<pre><code>var myObservable = new Observable();\nmyObservable.on( 'all', function( eventName ) {\n    console.log( \"Event '\" + eventName + \"' was fired with args: \", Array.prototype.slice.call( arguments, 1 ) );\n} );\n\nmyObservable.fireEvent( 'change', 'a', 'b', 'c' );\n// console: Event 'change' was fired with args: [ \"a\", \"b\", \"c\" ]\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the original event that was fired.</p>\n</div></li><li><span class='pre'>args</span> : Mixed...<div class='sub-desc'><p>The original arguments that were provided with the original event.</p>\n</div></li></ul></div></div></div><div id='event-destroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='jqGui.app.Controller'>jqGui.app.Controller</span><br/><a href='source/Controller.html#jqGui-app-Controller-event-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/jqGui.app.Controller-event-destroy' class='name expandable'>destroy</a>( <span class='pre'>controller</span> )</div><div class='description'><div class='short'>Fires when the Controller has been destroyed. ...</div><div class='long'><p>Fires when the Controller has been destroyed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>controller</span> : <a href=\"#!/api/jqGui.app.Controller\" rel=\"jqGui.app.Controller\" class=\"docClass\">jqGui.app.Controller</a><div class='sub-desc'><p>This Controller instance.</p>\n</div></li></ul></div></div></div></div></div></div></div>"});